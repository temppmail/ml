# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'cities_r2.csv'  # Replace with the actual path to your file
df = pd.read_csv(file_path)

# Display the first few rows of the dataset
print(df.head())

# Choose the feature for clustering (total_graduates in this case)
X = df[['total_graduates']]

# Apply data preprocessing (scaling)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine the optimal number of clusters using the Elbow method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=0)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Plot the Elbow method graph
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')  # Within-Cluster-Sum-of-Squares
plt.show()

# Based on the Elbow method, let's choose the number of clusters (k) as 3

# Apply K-Means clustering
kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=300, n_init=10, random_state=0)
df['cluster'] = kmeans.fit_predict(X_scaled)

# Plot the clusters
plt.scatter(X_scaled[:, 0], np.zeros_like(X_scaled[:, 0]), c=df['cluster'], cmap='viridis', s=50)
plt.title('K-Means Clustering of Cities based on Total Graduates')
plt.xlabel('Total Graduates (Scaled)')
plt.show()

# Display the clustered data
print(df[['name_of_city', 'total_graduates', 'cluster']])

